package main;

import java.awt.*;
import java.text.*;
import java.util.*;
import java.util.Timer;

import javax.swing.*;

public class workers {

	

	static class GameClock extends JPanel {
		
		SimpleDateFormat timeFormat;
		JLabel timeLabel = new JLabel();
		String time;
		
		int milliseconds = 300000;

		public GameClock(JPanel panel) {

			timeLabel.setFont(new Font("Serif", Font.PLAIN, 14));

			timeFormat = new SimpleDateFormat("mm:ss");
			time = timeFormat.format(milliseconds);
			timeLabel.setVisible(true);

			Timer timer = new Timer();
			TimerTask task = new TimerTask() {
				@Override
				public void run() {
					milliseconds -= 1;
					time = timeFormat.format(milliseconds);
					timeLabel.setText(time);
					panel.add(timeLabel);
					
				}
			};
			timer.scheduleAtFixedRate(task, 0, 1);
			
		}
	}

	static JFrame applicationWindow = new JFrame("Surchessake");
	static JPanel playArea = new JPanel();
	static JPanel chessboard = new JPanel();
	
	public static void displayChessboard() {

		// The JFrame applicationWindow to display the game
		applicationWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		applicationWindow.setSize(868, 635);
		applicationWindow.setLayout(null);
		
		// The JPanel playArea that sits in the JFrame applicationWindow and contains the chessboard
		playArea.setSize(856, 600);
		playArea.setLayout(null);
		playArea.setBackground(Color.pink);
		playArea.add(statsBoard);
		
		// The JPanel that displays the chess chessboard and sits in the playArea
		chessboard.setSize(512, 512);
		chessboard.setLocation(44, 44);
		chessboard.setBackground(null);
		chessboard.setLayout(new GridLayout(8, 8, 0, 0));
		
		// Timer and Move Module
		displayTimerAndMoves();
		
		// New Game Button
		newGame.setLocation(600, 44);
		newGame.setSize(128,64);
		newGame.setVisible(true);
		
		playArea.add(newGame);
		
		
		
		int squareIndex = 0;
		int flag = 0;

		// For loop to add Mouse Listeners to each Square, 64 of which are added to the Chesschessboard
		for(int i = 0; i < 8; i++) { 
			for(int j = 0; j < 8; j++) {
				
				JPanel square = new JPanel();

				// Beautiful ASCII fleing.
				char letter = (char) (j + 97);
				char number = (char) (8 - i + 48);

				square.setSize(64,64);
				
				// Initializing MouseListeners for each square.
				Mouse mouseListener = new Mouse();
				mouseListener.setName(Character.toString(letter) + Character.toString(number));
				mouseListener.setLocation(squareIndex);
				square.addMouseListener(mouseListener);

				if (flag == 0){
					square.setBackground(Color.WHITE);
					 flag = 1;
				}else {
					square.setBackground(Color.DARK_GRAY);
					 flag = 0;
				}
				
				JLabel piece = new JLabel();
				
				// If the square is the location of a piece, get correct icon.
				for(int k=0; k<LAN_BOARD.size(); k++) {
					if(squareIndex == LAN_BOARD.get(k).getLocation())
						piece.setIcon(new ImageIcon(LAN_BOARD.get(Piece.getPieceIndex(squareIndex, LAN_BOARD)).getImgsrc()));
				}

				// Add the piece to the array and square.
				piece.setHorizontalAlignment(SwingConstants.CENTER);
		        piece.setVerticalAlignment(SwingConstants.CENTER);
		        pieceIconArray.add(piece);
				piece.setVisible(true);
				piece.setSize(64,64);
				square.add(piece);

				// add square to the arraylist
				squareArray.add(square);

				square.setVisible(true);
				square.setLayout(null);
				chessboard.add(square);

				squareIndex++;

			} // For each column of the chessboard.
		
			// Flags for alternating square color.
			if (flag == 0)
				flag = 1;
			else 
				flag = 0;
				
		} // For each row of the chessboard.	



		// Set visibility.
		chessboard.setVisible(true);
		playArea.setVisible(true);
		applicationWindow.setVisible(true);
		
		// Add chessboard to playArea, and playArea to applicationWindow.
		playArea.add(chessboard);
		applicationWindow.add(playArea);
		
	} // displaychessboard()
}
